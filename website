import React from 'react';
// Lucide icons for a sleek, modern look
import { Star, GitBranch, Github, Code, Award } from 'lucide-react';

// Mock data for 36 repositories
//
// TODO: Replace this mock data with actual data fetched from a source like the GitHub API.
// You would typically make an API call in a useEffect hook and update the component's state.
// Example:
/*
import { useState, useEffect } from 'react';

const App = () => {
  const [repositories, setRepositories] = useState([]);

  useEffect(() => {
    const fetchRepos = async () => {
      try {
        // Replace 'YOUR_GITHUB_USERNAME' and consider using a personal access token for higher rate limits.
        const response = await fetch('https://api.github.com/users/YOUR_GITHUB_USERNAME/repos');
        const data = await response.json();
        const formattedRepos = data.map(repo => ({
          id: repo.id,
          name: repo.name,
          description: repo.description || 'No description provided.',
          stars: repo.stargazers_count,
          forks: repo.forks_count,
          language: repo.language || 'N/A',
          lastUpdate: new Date(repo.updated_at).toLocaleDateString(),
          isBestOfBest: false, // You would define logic to mark certain repos as 'best of best'
          avatarUrl: repo.owner.avatar_url // Or a project-specific image if available
        }));
        setRepositories(formattedRepos);
      } catch (error) {
        console.error("Error fetching repositories:", error);
        // Fallback to mock data or display an error message
        setRepositories(mockRepositories);
      }
    };
    fetchRepos();
  }, []); // Empty dependency array means this runs once on component mount

  // ... rest of your App component, using 'repositories' state instead of 'mockRepositories'
};
*/
const mockRepositories = Array.from({ length: 36 }).map((_, i) => ({
  id: i + 1,
  name: `Project Flux - Repo ${i + 1}`,
  description: i % 5 === 0 
    ? "An innovative, modular game framework empowering creators with ultimate control and hackability."
    : `A cutting-edge project exploring ${['AI-driven simulations', 'decentralized web technologies', 'real-time data analytics', 'interactive UI/UX designs', 'high-performance computing'].at(i % 5)} and advanced ${['JavaScript patterns', 'Rust optimizations', 'Python machine learning', 'Go microservices'].at((i + 2) % 4)}.`,
  stars: Math.floor(Math.random() * 2000) + 100,
  forks: Math.floor(Math.random() * 500) + 50,
  language: ['JavaScript', 'TypeScript', 'Python', 'Rust', 'Go', 'HTML/CSS'].at(i % 6),
  lastUpdate: `2025-${String(Math.floor(Math.random() * 12) + 1).padStart(2, '0')}-${String(Math.floor(Math.random() * 28) + 1).padStart(2, '0')}`,
  isBestOfBest: i % 7 === 0 || i === 0, // Mark a few as "best of the best"
  avatarUrl: `https://placehold.co/100x100/0f172a/60a5fa?text=R${i+1}` // Placeholder for project avatar
}));

// Main App component
const App = () => {
  // If you integrate real data, you would use state here:
  // const [repositories, setRepositories] = useState(mockRepositories);
  // and then map 'repositories' instead of 'mockRepositories' in the JSX below.

  return (
    <div className="min-h-screen bg-gray-950 text-gray-100 p-8 font-inter">
      {/* Global Styles from Tailwind are assumed */}
      <style>
        {`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        .font-inter {
          font-family: 'Inter', sans-serif;
        }
        /* Custom glow for best-of-best */
        .glow-border {
          position: relative;
          z-index: 1;
        }
        .glow-border::before {
          content: '';
          position: absolute;
          inset: -2px; /* Control the size of the glow */
          background: linear-gradient(45deg, #a855f7, #ec4899, #6366f1, #3b82f6);
          background-size: 400% 400%;
          animation: glowing 8s ease infinite;
          border-radius: 0.75rem; /* Match card border-radius */
          filter: blur(8px); /* Adjust blur for glow intensity */
          z-index: -1;
          opacity: 0.7;
        }

        @keyframes glowing {
          0% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
          100% { background-position: 0% 50%; }
        }
        `}
      </style>

      {/* Header Section */}
      <header className="text-center mb-16">
        <h1 className="text-6xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-600 mb-4 tracking-tight leading-tight">
          Praximous Vision
        </h1>
        <p className="text-xl text-gray-400 max-w-3xl mx-auto mb-8">
          Charting the course for innovation. Explore our curated selection of groundbreaking projects, driving the future of digital sovereignty.
        </p>
        <div className="flex justify-center space-x-4">
          <button className="flex items-center space-x-2 px-6 py-3 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105">
            <Github size={20} />
            <span>View All on GitHub</span>
          </button>
          <button className="flex items-center space-x-2 px-6 py-3 border-2 border-indigo-600 text-indigo-300 hover:text-white hover:bg-indigo-600 font-semibold rounded-lg shadow-lg transition-all duration-300 transform hover:scale-105">
            <Award size={20} />
            <span>Praximous Picks</span>
          </button>
        </div>
      </header>

      {/* Repositories Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
        {mockRepositories.map((repo) => (
          <RepoCard key={repo.id} repo={repo} />
        ))}
      </div>

      {/* Footer */}
      <footer className="text-center mt-16 text-gray-500 text-sm">
        <p>&copy; {new Date().getFullYear()} Praximous. All rights reserved.</p>
        <p>Built with passion for digital sovereignty.</p>
      </footer>
    </div>
  );
};

// Repository Card Component
const RepoCard = ({ repo }) => {
  return (
    <div
      className={`
        bg-gray-800 rounded-xl shadow-lg p-6 flex flex-col justify-between 
        transition-all duration-300 hover:scale-105 hover:shadow-xl 
        border-2 border-gray-700
        ${repo.isBestOfBest ? 'glow-border' : ''}
      `}
    >
      <div className="flex items-center mb-4">
        <img src={repo.avatarUrl} alt={repo.name} className="w-12 h-12 rounded-full mr-4 border-2 border-indigo-400" onError={(e) => { e.target.onerror = null; e.target.src="https://placehold.co/100x100/1e293b/a5b4fc?text=Repo"; }}/>
        <div>
          <h2 className="text-xl font-bold text-indigo-300 group-hover:text-indigo-200 transition-colors duration-300">
            {repo.name}
          </h2>
          {repo.isBestOfBest && (
            <span className="inline-flex items-center mt-1 px-3 py-1 bg-gradient-to-r from-purple-500 to-pink-500 text-white text-xs font-semibold rounded-full animate-pulse">
              <Award size={14} className="mr-1" /> Praximous Pick
            </span>
          )}
        </div>
      </div>
      <p className="text-gray-400 text-sm mb-4 flex-grow">
        {repo.description}
      </p>
      <div className="flex items-center justify-between text-gray-500 text-sm mt-auto">
        <div className="flex items-center space-x-3">
          <span className="flex items-center">
            <Star size={16} className="text-yellow-400 mr-1" /> {repo.stars}
          </span>
          <span className="flex items-center">
            <GitBranch size={16} className="text-green-400 mr-1" /> {repo.forks}
          </span>
          <span className="flex items-center">
            <Code size={16} className="text-blue-400 mr-1" /> {repo.language}
          </span>
        </div>
        <span className="text-xs text-gray-600">Updated: {repo.lastUpdate}</span>
      </div>
    </div>
  );
};

export default App;
